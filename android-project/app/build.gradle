def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY')
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion 30
    defaultConfig {
        if (buildAsApplication) {
            applicationId "com.skullzbones.shapes"
        }
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 3
        versionName "3.0"
        externalNativeBuild {
            ndkBuild {

                arguments "APP_PLATFORM=android-16"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
            // cmake {
            //     arguments "-DANDROID_APP_PLATFORM=android-16", "-DANDROID_STL=c++_static"
            //     // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            //     abiFilters 'arm64-v8a'
            // }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            ndkBuild {
                path 'jni/Android.mk'
            }
//             cmake {
//                 path 'jni/CMakeLists.txt'
//             }
        }
       
    }
    lintOptions {
        abortOnError false
    }
    

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
